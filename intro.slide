Tampa Go Meetup
15 Mar 2016
Tags: go golang generate goa

Brian Ketelsen
Generator of All The Things
bketelsen@gmail.com
http://brianketelsen.com/
@bketelsen
 
* Qualifications To Speak
 
.image ./gatt.jpg
 
- Lazy, hates repetiton
- Likes writing Go
 
* Why Generate Code?

- Write a program once
- Refine it until you like it
- Make a template of it and use it everywhere
- Single Source of Truth

Your "design" or inputs to your code generation tool are your Single Source of Truth.

* Code Generation Tools for Go

- gRPC https://github.com/grpc/grpc-go
- gen https://clipperhouse.github.io/gen/
- dozens more

Why?  Because it's easy, and Go has great tools to read and parse the AST if you want to use code as your input.
Go also has powerful text templates built in.

And who wants to solve the same problem twice?

* goa - Design First, Then Win

.image ./goa-logo@2x.png

My favorite code generation tool started as an API generator for Go.  I spend a lot of time building APIs and really liked the approach of goa:

- Design first.
- Use net/context everywhere
- Generate all the boilerplate, leave the business logic for the "hard work"

* Design First

goa uses Go code as its input.  This Go code is written using a DSL (written in Go) that makes your design process simple and clear.

.code ./design.go /START OMIT/,/END OMIT/

* dot imports

BUT YOU SAID DOT IMPORTS ARE BAD?

Yes, they're bad.  But if you are only using them in your design files, you run no risk.  Accept that the dot imports make the design DSL much prettier and move on.  kthxbai

* Behind the Scenes

Each of those DSL functions is populating a set of structures that describes your API.  Each function understands its current `context` and therefore can provide you with compile and generate-time errors when you're building your DSL incorrectly.

* Designing an API

Design code usually lives in the ./design package of your project's root.  It consists of one or more Go files (because it's a package) that describe your API.

Design code should have the following parts:

- API Definition
- Resource definition
- Media Type definition
- User Type definition (Payloads for create/update methods)
- Security Definition (landing this week?)

* API Definition

The basics of your API
- Host information
- License information
- Base path

.code ./design/api.go /START OMIT/,/END OMIT/


* API Definition (cont)

.code ./design/api2.go /START OMIT/,/END OMIT/

* Media Type Definition

What are you sending in response to requests?

.code ./design/media_types.go /START OMIT/,/END OMIT/

* User Type Definition

What are you receiving in PUT, PATCH, POST?

.code ./design/user_types.go /START OMIT/,/END OMIT/

* Resource Definition

Routing requests to controllers

.code ./design/resources.go /START OMIT/,/END OMIT/

* Now Make Yourself An API

`goagen --design=github.com/your/project/design bootstrap`


* What did you get?

- /app     = controllers, routing logic, type conversions, validations
- /js      = javascript client for your API
- /swagger = swagger controller and swagger spec
- /schema  = JSON schema for the API
- /client  = Go client package and CLI for your API
- main.go  = wire it all together
- {controller.go} = stubbed controllers for all your resources
- Full swagger definition.  Use swagger-api or your favorite swagger service. 
- Fully functioning app - just add business logic in the controllers

* Can I get an Amen?
 
.image ./gatt.jpg

* Workflow

- Write your design.  Take your time and think it through.
- `goagen` with `bootstrap` the first time
- Add code to the controllers
- Compile, run, smile

Changes required?

- Change the design
- `goagen` again {app,js,swagger,schema,client,main}
- bootstrap and main won't overwrite your main.go and controllers

* Nuance is in the Design

Read the docs and examples at http://goa.design

Very well documented project, thorough godoc, great examples.

Nice website too :)

* That's nice, I don't have an API

We have a treat for you.

`github.com/goadesign/goa/dslengine`

The first thing I did when I found goa was submit a PR to make the DSL engine stand-alone.
You can write a DSL to generate _anything_.

* Gorma

The next thing I did was write Gorma.

Using the same style as `goa`, add some model definitions to your design package.

Gorma generates the an entire data storage package for your API.

http://goa.design/extend/gorma.html

- Uses github.com/jinzhu/gorm as a lightweight ORM
- Manages migrations
- Can be used for full ORM operations, or just as a nice abstraction to allow you to swap databases
- Use sqlite in dev, mysql in prod, same code!

* Gorma Features

- Understands `goa` media types, payloads, and views
- Generates conversion functions to convert to and from models to your api's types

.code ./models/review.go /START OMIT/,/END OMIT/

* Beautiful Helpers

.code ./models/review_helper.go /START OMIT/,/END OMIT/

* But wait... there's more

- Middleware 
	JWT, LogRequest, LogResponse, RequestID,
	Recover, Timeout, RequireHeader,
	CORS, gzip
- Pluggable loggers, use log15, logrus, anything else with tiny adapter.  Structured Log for Everyone!
- Pluggable metrics collection - Prometheus, StatsD, more

* What's Coming?

- Better Security DSL, specify Oauth, Tokens, Basic Auth requirements in DSL
- 1.0 *soon*
- More examples, more documentation
- Raphael Simon "The Godfather of goa" speaking at GopherCon 2016
